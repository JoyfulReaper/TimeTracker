/*
Deployment script for TimeTracker

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TimeTrackerDB"
:setvar DefaultFilePrefix "TimeTrackerDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Entry]...';


GO
CREATE TABLE [dbo].[Entry] (
    [Id]         INT                IDENTITY (1, 1) NOT NULL,
    [ProjectId]  INT                NOT NULL,
    [HoursSpent] FLOAT (53)         NOT NULL,
    [Date]       DATETIMEOFFSET (7) NOT NULL,
    [Notes]      NVARCHAR (1000)    NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Project]...';


GO
CREATE TABLE [dbo].[Project] (
    [Id]            INT           IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50) NOT NULL,
    [CategoryId]    INT           NOT NULL,
    [SubcategoryId] INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Subcategory]...';


GO
CREATE TABLE [dbo].[Subcategory] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (50) NOT NULL,
    [CategoryId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Entry_Project]...';


GO
ALTER TABLE [dbo].[Entry]
    ADD CONSTRAINT [FK_Entry_Project] FOREIGN KEY ([ProjectId]) REFERENCES [dbo].[Project] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Project_Category]...';


GO
ALTER TABLE [dbo].[Project]
    ADD CONSTRAINT [FK_Project_Category] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Project_Subcategory]...';


GO
ALTER TABLE [dbo].[Project]
    ADD CONSTRAINT [FK_Project_Subcategory] FOREIGN KEY ([SubcategoryId]) REFERENCES [dbo].[Subcategory] ([Id]);


GO
PRINT N'Creating [dbo].[FK_subcategory_Category]...';


GO
ALTER TABLE [dbo].[Subcategory]
    ADD CONSTRAINT [FK_subcategory_Category] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([Id]);


GO
PRINT N'Creating [dbo].[spCategory_Delete]...';


GO
CREATE PROCEDURE [dbo].[spCategory_Delete]
	@Id int
AS
begin

	set nocount on;

	delete from Category where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spCategory_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spCategory_GetAll]
AS
begin

	set nocount on;

	select [Id], [Name]
	from dbo.Category;

end
GO
PRINT N'Creating [dbo].[spCategory_GetById]...';


GO
CREATE PROCEDURE [dbo].[spCategory_GetById]
	@Id int
AS
begin

	set nocount on;

	select [Id], [Name]
	from dbo.Category
	where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spCategory_Insert]...';


GO
CREATE PROCEDURE [dbo].[spCategory_Insert]
	@Name nvarchar(50),
	@Id int = 0 output
AS
begin

	set nocount on;

	insert into dbo.Category (Name)
	values (@Name);

	select @Id = SCOPE_IDENTITY();

end
GO
PRINT N'Creating [dbo].[spCategory_Update]...';


GO
CREATE PROCEDURE [dbo].[spCategory_Update]
	@Name nvarchar(50),
	@Id int
AS
begin

	set nocount on;

	update Category
	set Name = @Name
	where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spEntry_Delete]...';


GO
CREATE PROCEDURE [dbo].[spEntry_Delete]
	@Id int
AS
begin

	set nocount on;

	delete 
	from Entry
	where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spEntry_DeleteByProject]...';


GO
CREATE PROCEDURE [dbo].[spEntry_DeleteByProject]
	@ProjectId int
AS
begin

	set nocount on;

	delete 
	from Entry
	Where ProjectId = @ProjectId;

end
GO
PRINT N'Creating [dbo].[spEntry_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spEntry_GetAll]
AS
begin

	set nocount on;

	select [Id], [ProjectId], [HoursSpent], [Date], [Notes]
	from dbo.Entry;

end
GO
PRINT N'Creating [dbo].[spEntry_GetByCategory]...';


GO
CREATE PROCEDURE [dbo].[spEntry_GetByCategory]
	@CategoryId int
AS
begin

	set nocount on;

	select [e].[Id], [e].[ProjectId], [e].[HoursSpent], [e].[Date], [e].[Notes]
	from Entry e
	inner join Project p on e.ProjectId = p.Id
	inner join Category c on p.CategoryId = c.Id
	where p.CategoryId = @CategoryId;

end
GO
PRINT N'Creating [dbo].[spEntry_GetByProjectId]...';


GO
CREATE PROCEDURE [dbo].[spEntry_GetByProjectId]
	@ProjectId int
AS
begin

	set nocount on;

	select [Id], [ProjectId], [HoursSpent], [Date], [Notes]
	from Entry
	where ProjectId = @ProjectId;

end
GO
PRINT N'Creating [dbo].[spEntry_GetBySubcategory]...';


GO
CREATE PROCEDURE [dbo].[spEntry_GetBySubcategory]
	@SubcategoryId int
AS
begin

	set nocount on;

	select [e].[Id], [e].[ProjectId], [e].[HoursSpent], [e].[Date], [e].[Notes]
	from Entry e
	inner join Project p on e.ProjectId = p.Id
	inner join Subcategory s on p.SubcategoryId = s.Id
	where p.SubcategoryId = @SubcategoryId;

end
GO
PRINT N'Creating [dbo].[spEntry_Insert]...';


GO
CREATE PROCEDURE [dbo].[spEntry_Insert]
	@ProjectId int,
	@HoursSpent float,
	@Date datetimeoffset(7),
	@Notes nvarchar(1000),
	@Id int = 0 out
AS
begin

	set nocount on;

	insert into Entry (ProjectId, HoursSpent, Date, Notes)
	values (@ProjectId, @HoursSpent, @Date, @Notes);

	select @Id = SCOPE_IDENTITY();

end
GO
PRINT N'Creating [dbo].[spProject_Delete]...';


GO
CREATE PROCEDURE [dbo].[spProject_Delete]
	@Id int
AS
begin

	set nocount on;

	delete
	from Project
	where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spProject_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spProject_GetAll]
AS
begin

set nocount on;

select [Id], [Name], [CategoryId], [SubcategoryId]
from Project;

end
GO
PRINT N'Creating [dbo].[spProject_GetByCatId]...';


GO
CREATE PROCEDURE [dbo].[spProject_GetByCatId]
	@CategoryId int
AS
begin
	set nocount on;

	select * 
	from Project
	where CategoryId = @CategoryId;
end
GO
PRINT N'Creating [dbo].[spProject_GetBySubCatId]...';


GO
CREATE PROCEDURE [dbo].[spProject_GetBySubCatId]
	@SubcategoryId int
AS
begin

	set nocount on;

	select * 
	from Project
	where SubcategoryId = @SubcategoryId;

end
GO
PRINT N'Creating [dbo].[spProject_Insert]...';


GO
CREATE PROCEDURE [dbo].[spProject_Insert]
	@Name nvarchar(50),
	@CategoryId int,
	@SubcategoryId int,
	@Id int = 0 output
AS
begin

	set nocount on;

	insert into Project (Name, CategoryId, SubcategoryId)
	values (@Name, @CategoryId, @SubcategoryId);

	select @Id = SCOPE_IDENTITY();

end
GO
PRINT N'Creating [dbo].[spProject_Update]...';


GO
CREATE PROCEDURE [dbo].[spProject_Update]
	@Name nvarchar(50),
	@Id int,
	@CategoryId int,
	@SubcategoryId int
AS
begin

	set nocount on;

	update Project
	set Name = @Name, CategoryId = @CategoryId, SubcategoryId = @SubcategoryId
	where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spSubcategory_Delete]...';


GO
CREATE PROCEDURE [dbo].[spSubcategory_Delete]
	@Id int
AS
begin
	set nocount on;

	delete from Subcategory where Id = @Id;
end
GO
PRINT N'Creating [dbo].[spSubcategory_GetByCategoryId]...';


GO
CREATE PROCEDURE [dbo].[spSubcategory_GetByCategoryId]
	@CategoryId int
AS
begin

set nocount on;

select [Id], [Name], [CategoryId]
from dbo.Subcategory
where CategoryId = @CategoryId;

end
GO
PRINT N'Creating [dbo].[spSubcategory_GetById]...';


GO
CREATE PROCEDURE [dbo].[spSubcategory_GetById]
	@Id int
AS
begin

set nocount on;

	select [Id], [Name], [CategoryId]
	from dbo.Subcategory
	where Id = @Id;

end
GO
PRINT N'Creating [dbo].[spSubcategory_Insert]...';


GO
CREATE PROCEDURE [dbo].[spSubcategory_Insert]
	@Name varchar(50),
	@CategoryId int,
	@Id int = 0 output
AS
begin

set nocount on;

insert into Subcategory (Name, CategoryId)
values (@Name, @CategoryId);

select @Id = SCOPE_IDENTITY();

end
GO
PRINT N'Creating [dbo].[spSubcategory_Update]...';


GO
CREATE PROCEDURE [dbo].[spSubcategory_Update]
	@Name varchar(50),
	@Id int
AS
begin

	set nocount on;

	update Subcategory
	set Name = @Name
	where Id = @Id;

end
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
